const sequelize = require("../../config/db");
const { Tour, Booking, BookingDetail, Image, TourCategory, Schedule, Payment } = require("../model");
const User = require("../model/User");

const PaymentService = require("./PaymentService");
const ZalopayService = require("./ZalopayService");

class TourBookingService {
    static async showBookingService({ user_id, booking_id }) {
        try {
            if (!user_id) {
                return {
                    status: 401,
                    message: "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem chi ti·∫øt tour"
                };
            }
    
            if (!booking_id) {
                return {
                    status: 404,
                    message: "Kh√¥ng t√¨m th·∫•y tour!"
                };
            }
    
            const tour = await Booking.findByPk(booking_id, {
                include: [
                    {
                        model: Payment,
                        model: BookingDetail,
                        include: [
                            { 
                                model: Tour,
                                include: [
                                    Image
                                ] 
                            }
                        ]
                    }
                ]
            });
    
            if (!tour) {
                return {
                    status: 404,
                    message: "Tour kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ b·ªã x√≥a!"
                };
            }
    
            return {
                success: true,
                status: 200,
                data: tour
            };
        } catch (error) {
            console.error("L·ªói khi l·∫•y th√¥ng tin tour:", error);
            return {
                status: 500,
                message: "L·ªói m√°y ch·ªß, vui l√≤ng th·ª≠ l·∫°i sau!"
            };
        }
    }
    static async createBookingService({ user_id, tour_id, adult_count, child_count, payment_method, req }) {
        const transaction = await sequelize.transaction();
        try {
            // üîí Kh√≥a h√†ng ƒë·ªÉ ƒë·∫£m b·∫£o ch·ªâ c√≥ 1 ng∆∞·ªùi c√≥ th·ªÉ ƒë·∫∑t tour t·∫°i m·ªôt th·ªùi ƒëi·ªÉm
            const tour = await Tour.findOne({
                where: { id: tour_id },
                lock: true,  // SELECT ... FOR UPDATE
                transaction
            });
            
            if (!tour) {
                await transaction.rollback();
                return {
                    success: false,
                    message: "Tour kh√¥ng t·ªìn t·∫°i!"
                };
            }
    
            const currentDate = new Date();
            
            // Ki·ªÉm tra tour ƒë√£ k·∫øt th√∫c ch∆∞a
            if (tour.end_date < currentDate) {
                await transaction.rollback();
                return {
                    success: false,
                    message: "Tour ƒë√£ k·∫øt th√∫c, kh√¥ng th·ªÉ ƒë·∫∑t n·ªØa!"
                };
            }
            
            // Ki·ªÉm tra tour ƒë√£ b·∫Øt ƒë·∫ßu hay ch∆∞a
            if (currentDate > tour.departure_date && currentDate < tour.end_date) {
                await transaction.rollback();
                return {
                    success: false,
                    message: "Tour ƒë√£ b·∫Øt ƒë·∫ßu, vui l√≤ng ch·ªçn l·ªãch tr√¨nh kh√°c ho·∫∑c ch·ªù ƒë·ª£t m·ªü ƒëƒÉng k√Ω ti·∫øp theo."
                };
            }
    
            // Ki·ªÉm tra s·ªë l∆∞·ª£ng kh√°ch ƒëƒÉng k√Ω
            const totalGuests = adult_count + child_count;
            if (tour.remaining_quantity < totalGuests) {
                await transaction.rollback();
                return {
                    success: false,
                    message: `Ch·ªâ c√≤n ${tour.remaining_quantity} ch·ªó tr·ªëng, vui l√≤ng gi·∫£m s·ªë l∆∞·ª£ng ho·∫∑c ch·ªçn tour kh√°c.`
                };
            }
            if (payment_method === "offline" && totalGuests > 2) {
                await transaction.rollback();
                return {
                    success: false,
                    message: "Ph∆∞∆°ng th·ª©c thanh to√°n offline ch·ªâ √°p d·ª•ng cho t·ªëi ƒëa 2 kh√°ch. Vui l√≤ng ch·ªçn thanh to√°n online n·∫øu c√≥ nhi·ªÅu h∆°n 2 kh√°ch."
                };
            }
            const user = await User.findByPk(user_id)
            console.log(user)
            if (payment_method === "offline" && !user.isVerified)
            {
                await transaction.rollback()
                return {
                    message: "B·∫°n c·∫ßn x√°c th·ª±c t√†i kho·∫£n khi thanh to√°n offline!!!"
                }
            }
            const totalPrice = (adult_count * tour.adult_price) + (child_count * tour.child_price);
            
            // T·∫°o booking
            const booking = await Booking.create({
                user_id,
                total_price: totalPrice,
                tour_code: "TOUR_" + Math.floor(Math.random() * 1000000),
                status: "pending",
                payment_status: "unpaid"
            }, { transaction });
            
            // T·∫°o booking detail
            await BookingDetail.create({
                booking_id: booking.id,
                tour_id,
                adults: adult_count,
                children: child_count,
                total_price: totalPrice
            }, { transaction });
            
            // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng c√≤n l·∫°i c·ªßa tour
            await Tour.update(
                { remaining_quantity: tour.remaining_quantity - totalGuests },
                { where: { id: tour.id }, transaction }
            );
            
            await transaction.commit();
            
            // Return booking information
            return {
                success: true,
                message: "ƒê·∫∑t tour th√†nh c√¥ng!",
                booking_id: booking.id,
                total_price: totalPrice,
                tour_id: tour_id,
                tour: tour,
                tour_code: booking.tour_code
            };
        } catch (error) {
            console.log("L·ªói trong backend:", error);
            await transaction.rollback();
            return {
                success: false,
                message: error.message
            };
        }
    }

    static async processPayment({ booking_id, total_price, req, tour_id }) 
    {
        try {
            const vnpayResponse = await PaymentService.createVNPayPayment({
                amount: total_price,
                booking_id: booking_id,
                req: req,
                tour_id: tour_id
            });
            
            return {
                success: true,
                payment_url: vnpayResponse.paymentUrl
            };
        } catch (error) {
            console.error("[processPayment] Error:", error);
            return {
                success: false,
                message: "L·ªói x·ª≠ l√Ω thanh to√°n: " + error.message
            };
        }
    }
    static async processZalo({ booking_id, total_price, tour_id, user }) {
        try {
            const zalopayResponse = await ZalopayService.createZalopayPatment({
                amount: total_price,
                booking_id: booking_id,
                tour_id: tour_id,
                user: user
            });

            return {
                success: true,
                payment_url: zalopayResponse.order_url // ƒê√∫ng t√™n tr∆∞·ªùng tr·∫£ v·ªÅ t·ª´ API Zalopay
            };
        } catch (error) {
            console.error("[processPayment] Error:", error);
            return {
                success: false,
                message: "L·ªói x·ª≠ l√Ω thanh to√°n: " + error.message
            };
        }
    }
}

module.exports = TourBookingService;